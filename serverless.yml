org: tristanneumann1
service: fossil-marketplace
app: fossil-marketplace

plugins:
  - serverless-apigw-binary
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline

provider:
  name: aws
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  runtime: nodejs12.x
  versionFunctions: false
  stage: ${opt:stage, "dev"}
  region: us-east-1
  cfnRole: arn:aws:iam::916585162511:role/CFNRole
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource:
        - Fn::GetAtt: [EventStore, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [EventStore, Arn]
              - '*'

custom:
  secrets: ${file(secrets.local.json)}
  eventStoreTableName: fossil-marketplace-event-store
  eventStoreIndexName: aggregate-by-id
  apigwBinary:
    types:
      - '*/*'
  customDomain:
    domainName: ${self:custom.secrets.DOMAIN}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      port: 8800
      dbPath: ./.dynamodb
      heapInitial: 200m
      heapMax: 1g
      convertEmptyValues: true
  dynamodbStream:
    region: "#{AWS::Region}"
    host: localhost
    port: 8800
    pollForever: true
    streams:
      - table: ${self:custom.eventStoreTableName}
        functions:
          - EventBus

resources:
  - Resources:
      EventStore:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:custom.eventStoreTableName}
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          StreamSpecification:
            StreamViewType: NEW_IMAGE
          AttributeDefinitions:
            - AttributeName: aggregateName
              AttributeType: S
            - AttributeName: eventDate
              AttributeType: S
            - AttributeName: aggregateIdKey
              AttributeType: S
          KeySchema:
            - AttributeName: aggregateName
              KeyType: HASH
            - AttributeName: eventDate
              KeyType: RANGE
          LocalSecondaryIndexes:
            - IndexName: ${self:custom.eventStoreIndexName}
              KeySchema:
              - AttributeName: aggregateName
                KeyType: HASH
              - AttributeName: aggregateIdKey
                KeyType: RANGE
              Projection:
                ProjectionType: ALL

cors-config: &cors-config
  origin: '*'
  headers:
    - Content-Type
    - Authorization
    - X-Amz-Date
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - X-Api-Key

default-env: &default-env
  STAGE: ${self:provider.stage}
  NODE_ENV: ${self:provider.stage}
  API_REGION: "#{AWS::Region}"
  EVENT_STORE_TABLE_NAME: ${self:custom.eventStoreTableName}
  EVENT_STORE_INDEX_NAME: ${self:custom.eventStoreIndexName}

functions:
  hello:
    handler: hello.helloWorld
    events:
      - http:
          path: hello-world
          method: GET
          cors:
            <<: *cors-config
  # INFRASTRUCTURE
  EventBus:
    handler: infrastructure/eventBus.stream
    environment:
      <<: *default-env
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [EventStore, StreamArn]
          startingPosition: LATEST
  nuxt:
    handler: controllers/client.nuxt
    events:
      - http: ANY /
      - http: ANY /{proxy+}
  # COMMANDS
  CreateAccount:
    handler: controllers/account.createAccount
    environment:
      <<: *default-env
    events:
      - http:
          path: create-account
          method: POST
          cors:
            <<: *cors-config
  ListItem:
    handler: controllers/fossil.listItem
    environment:
      <<: *default-env
    events:
      - http:
          path: list-item
          method: POST
          cors:
            <<: *cors-config
  UnListItem:
    handler: controllers/fossil.unlistItem
    environment:
      <<: *default-env
    events:
      - http:
          path: unlist-item
          method: POST
          cors:
            <<: *cors-config
  DesireItem:
    handler: controllers/fossil.desireItem
    environment:
      <<: *default-env
    events:
      - http:
          path: desire-item
          method: POST
          cors:
            <<: *cors-config
  UnDesireItem:
    handler: controllers/fossil.undesireItem
    environment:
      <<: *default-env
    events:
      - http:
          path: undesire-item
          method: POST
          cors:
            <<: *cors-config
  # PROJECTIONS
  FossilCatalog:
    handler: projections/index.fossilCatalog
    environment:
      <<: *default-env
    events:
      - http:
          path: /projection/fossil-catalog
          method: GET
          cors:
            <<: *cors-config